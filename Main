#!/usr/bin/env python2
#Calculo das metricas de centralidades: Closeness and Betweenness Temporais.
from temporal_graph import *
from math import sqrt
from random import random
import time
import numpy as np

dadosIn = open("C:\\Users\\Nayse\\Desktop\\communities24T.txt", "r")
vertex = open("C:\\Users\\Nayse\\Desktop\\vertices.txt",'r')

dadosOut1 = open("Btw_comunities.txt",'w')

if __name__ == "__main__":
      
    et = 3 # time end
    
    G = temporal_graph(et)
    
    ls = []
    for i in vertex:
        ls.append(i.rstrip())
   
    G.add_vertices(ls)
    
    for v in dadosIn:
        v = v.rstrip().split(" ")
        time = (v[2],v[3])
        vertices = (v[0],v[1])
        junt = [(vertices,time)]
        G.add_temporal_edges(junt)
    
    print("[=>] Calculando betweenness Temporal")
    
    temp_betweenness = compute_temporal_betweenness(G,0,et)
    print(temp_betweenness)
    for a,b in temp_betweenness.items():
        dadosOut1.write(str(b)+"\n")
        
    #print("[=>] Calculando closeness Temporal")
    #temp_closeness = compute_temporal_closeness(G,0,et)
    #for v in G.vertices:
        #dadosOut2.write(str(v) + " " + str(temp_closeness[v]) + "\n")   
    
    #print("[=>] Calculando closeness Agregado")
    #agg_closeness = compute_static_graph_statistics(G,0,et)
    #for v in G.vertices:
        #dadosOut3.write(str(v) + " " + str(agg_closeness[0][1][v]) + "\n")
    
    dadosIn.close()
    vertex.close()
    dadosOut1.close()
    #dadosOut2.close()
    #dadosOut3.close()
    print("FIM")

print(time.time() - start_t)
